---
import { config_site } from "../utils/yaml-config-adapter";
// @ts-ignore
import * as feather from "feather-icons";
import Search from "./Search.astro";

// TypeScript类型定义
interface NavItem {
  title: string;
  path: string;
  icon?: string;
}

// 获取导航配置
const navItems: NavItem[] = config_site.nav || [];

// 从feather图标库获取图标的辅助函数
function getIconSvg(iconName: string): string {
  if (!iconName) return "";
  try {
    const icon = feather.icons[iconName];
    return icon
      ? icon.toSvg({
          width: 20,
          height: 20,
          "stroke-width": 2,
          class: "nav-icon",
        })
      : "";
  } catch (error) {
    console.error(`Icon '${iconName}' not found in feather-icons`);
    return "";
  }
}
import "../styles/components/Header.css";
---

<nav class="nav">
  <button
    id="mobile-menu-toggle"
    class="mobile-menu-toggle"
    aria-label="导航菜单"
    aria-expanded="false"
  >
    <span class="menu-icon-wrapper">
      <Fragment
        set:html={feather.icons["menu"].toSvg({
          width: 24,
          height: 24,
          class: "menu-icon menu-open",
        })}
      />
      <Fragment
        set:html={feather.icons["x"].toSvg({
          width: 24,
          height: 24,
          class: "menu-icon menu-close",
        })}
      />
    </span>
  </button>

  <ul id="nav-menu">
    {
      navItems.map((item) => (
        <li>
          <a href={item.path} class="nav-link">
            {item.icon && (
              <span
                class="nav-icon-container"
                set:html={getIconSvg(item.icon)}
              />
            )}
            <span>{item.title}</span>
          </a>
        </li>
      ))
    }
    <li>
      <p class="nav-link search-toggle" id="search-toggle">
        <span
          class="nav-icon-container"
          set:html={feather.icons["search"].toSvg({
            width: 20,
            height: 20,
            "stroke-width": 2,
            class: "nav-icon",
          })}
        />
        <span>搜索</span>
      </p>
    </li>
  </ul>
</nav>

<!-- 移动端菜单遮罩层 -->
<div id="mobile-menu-backdrop" class="mobile-menu-backdrop"></div>

<div id="search-container" class="search-container">
  <div class="search-backdrop"></div>
  <div class="search-box">
    <div class="search-header">
      <h2>站内搜索</h2>
      <button class="search-close" id="search-close">
        <Fragment
          set:html={feather.icons["x"].toSvg({
            width: 24,
            height: 24,
            class: "close-icon",
          })}
        />
      </button>
    </div>
    <div class="search-content">
      <Search />
    </div>
  </div>
</div>

<script>
  // 移动端菜单交互逻辑 - 使用client:load确保每次页面加载都执行
  console.log("Header script loaded");

  // 全局事件处理器存储 - 使用正确的类型定义
  const eventHandlers = {
    menuClick: null as ((e: Event) => void) | null,
    menuItemClicks: [] as Array<{ element: Element; func: () => void }>,
    backdropClick: null as (() => void) | null,
    documentClick: null as ((e: Event) => void) | null,
    documentKeydown: null as ((e: KeyboardEvent) => void) | null,
    searchToggleClick: null as (() => void) | null,
    searchCloseClick: null as (() => void) | null,
    searchBackdropClick: null as (() => void) | null,
    searchKeydown: null as ((e: KeyboardEvent) => void) | null,
  };

  const initMobileMenu = function () {
    console.log("initMobileMenu called");

    const menuToggle = document.getElementById("mobile-menu-toggle");
    const navMenu = document.getElementById("nav-menu");
    const searchToggle = document.getElementById("search-toggle");
    const searchContainer = document.getElementById("search-container");
    const searchClose = document.getElementById("search-close");
    const searchBackdrop = document.querySelector(".search-backdrop");
    const mobileMenuBackdrop = document.getElementById("mobile-menu-backdrop");

    console.log("Elements found:", {
      menuToggle: !!menuToggle,
      navMenu: !!navMenu,
      mobileMenuBackdrop: !!mobileMenuBackdrop,
    });

    if (menuToggle && navMenu && mobileMenuBackdrop) {
      console.log("Binding click event to menu toggle");

      // 移除之前的事件监听器
      if (eventHandlers.menuClick) {
        menuToggle.removeEventListener("click", eventHandlers.menuClick);
      }

      // 创建新的点击处理函数
      eventHandlers.menuClick = function (e: Event) {
        console.log("Menu toggle clicked");
        e.preventDefault();
        e.stopPropagation();

        if (navMenu.classList.contains("active")) {
          // 关闭菜单
          console.log("Closing menu");
          navMenu.classList.remove("active");
          menuToggle.setAttribute("aria-expanded", "false");
          mobileMenuBackdrop.classList.remove("active");
        } else {
          // 打开菜单
          console.log("Opening menu");
          navMenu.classList.add("active");
          menuToggle.setAttribute("aria-expanded", "true");
          mobileMenuBackdrop.classList.add("active");
        }
      };

      menuToggle.addEventListener("click", eventHandlers.menuClick);

      // 点击菜单项后关闭菜单
      const menuItems = navMenu.querySelectorAll("a, .search-toggle");
      console.log("Found menu items:", menuItems.length);

      // 移除之前的事件监听器
      eventHandlers.menuItemClicks.forEach((handler) => {
        if (handler.element && handler.func) {
          handler.element.removeEventListener("click", handler.func);
        }
      });
      eventHandlers.menuItemClicks = [];

      menuItems.forEach(function (item, index) {
        const clickHandler = function () {
          console.log("Menu item clicked:", index);
          if (window.innerWidth <= 768) {
            navMenu.classList.remove("active");
            menuToggle.setAttribute("aria-expanded", "false");
            mobileMenuBackdrop.classList.remove("active");
          }
        };

        item.addEventListener("click", clickHandler);
        eventHandlers.menuItemClicks.push({
          element: item,
          func: clickHandler,
        });
      });

      // 点击遮罩层关闭菜单
      if (mobileMenuBackdrop) {
        if (eventHandlers.backdropClick) {
          mobileMenuBackdrop.removeEventListener(
            "click",
            eventHandlers.backdropClick
          );
        }

        eventHandlers.backdropClick = function () {
          console.log("Backdrop clicked");
          navMenu.classList.remove("active");
          menuToggle.setAttribute("aria-expanded", "false");
          mobileMenuBackdrop.classList.remove("active");
        };

        mobileMenuBackdrop.addEventListener(
          "click",
          eventHandlers.backdropClick
        );
      }

      // 点击菜单外部关闭菜单
      if (eventHandlers.documentClick) {
        document.removeEventListener("click", eventHandlers.documentClick);
      }

      eventHandlers.documentClick = function (e: Event) {
        if (
          window.innerWidth <= 768 &&
          !navMenu.contains(e.target as Node) &&
          !menuToggle.contains(e.target as Node) &&
          !mobileMenuBackdrop.contains(e.target as Node) &&
          navMenu.classList.contains("active")
        ) {
          console.log("Clicked outside menu");
          navMenu.classList.remove("active");
          menuToggle.setAttribute("aria-expanded", "false");
          mobileMenuBackdrop.classList.remove("active");
        }
      };

      document.addEventListener("click", eventHandlers.documentClick);

      // ESC键关闭菜单
      if (eventHandlers.documentKeydown) {
        document.removeEventListener("keydown", eventHandlers.documentKeydown);
      }

      eventHandlers.documentKeydown = function (e: KeyboardEvent) {
        if (e.key === "Escape" && navMenu.classList.contains("active")) {
          console.log("ESC pressed");
          navMenu.classList.remove("active");
          menuToggle.setAttribute("aria-expanded", "false");
          mobileMenuBackdrop.classList.remove("active");
        }
      };

      document.addEventListener("keydown", eventHandlers.documentKeydown);
    } else {
      console.log("Required elements not found, cannot initialize menu");
    }

    // 搜索框交互逻辑
    if (searchToggle && searchContainer && searchClose) {
      console.log("Initializing search functionality");

      // 移除之前的事件监听器
      if (eventHandlers.searchToggleClick) {
        searchToggle.removeEventListener(
          "click",
          eventHandlers.searchToggleClick
        );
      }
      if (eventHandlers.searchCloseClick) {
        searchClose.removeEventListener(
          "click",
          eventHandlers.searchCloseClick
        );
      }

      // 点击搜索按钮显示搜索框
      eventHandlers.searchToggleClick = function () {
        console.log("Search toggle clicked");
        searchContainer.classList.add("active");
        document.body.style.overflow = "hidden"; // 防止背景滚动
        // 聚焦到搜索输入框
        setTimeout(function () {
          const searchInput = document.querySelector(
            ".pagefind-ui__search-input"
          );
          if (searchInput && typeof (searchInput as any).focus === "function") {
            (searchInput as any).focus();
          }
        }, 100);
      };

      searchToggle.addEventListener("click", eventHandlers.searchToggleClick);

      // 点击关闭按钮隐藏搜索框
      eventHandlers.searchCloseClick = function () {
        console.log("Search close clicked");
        searchContainer.classList.remove("active");
        document.body.style.overflow = ""; // 恢复背景滚动
      };

      searchClose.addEventListener("click", eventHandlers.searchCloseClick);

      // 点击遮罩层关闭搜索框
      if (searchBackdrop) {
        if (eventHandlers.searchBackdropClick) {
          searchBackdrop.removeEventListener(
            "click",
            eventHandlers.searchBackdropClick
          );
        }

        eventHandlers.searchBackdropClick = function () {
          console.log("Search backdrop clicked");
          searchContainer.classList.remove("active");
          document.body.style.overflow = "";
        };

        searchBackdrop.addEventListener(
          "click",
          eventHandlers.searchBackdropClick
        );
      }

      // ESC键关闭搜索框
      if (eventHandlers.searchKeydown) {
        document.removeEventListener("keydown", eventHandlers.searchKeydown);
      }

      eventHandlers.searchKeydown = function (e: KeyboardEvent) {
        if (
          e.key === "Escape" &&
          searchContainer.classList.contains("active")
        ) {
          console.log("ESC pressed for search");
          searchContainer.classList.remove("active");
          document.body.style.overflow = "";
        }
      };

      document.addEventListener("keydown", eventHandlers.searchKeydown);
    }
  };

  // 页面加载完成后初始化
  document.addEventListener("DOMContentLoaded", function () {
    console.log("DOMContentLoaded fired, initializing menu...");
    initMobileMenu();
  });

  // 监听Astro页面过渡事件
  document.addEventListener("astro:page-load", function () {
    console.log("Astro page-load event fired, reinitializing menu...");
    // 延迟执行，确保DOM已更新
    setTimeout(function () {
      initMobileMenu();
    }, 50);
  });

  // 立即尝试初始化（以防DOMContentLoaded已经触发）
  if (document.readyState === "loading") {
    console.log("Document still loading, waiting for DOMContentLoaded...");
  } else {
    console.log("Document already loaded, initializing immediately...");
    initMobileMenu();
  }
</script>
